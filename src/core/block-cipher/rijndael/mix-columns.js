// mix-column is treat a column of state as a polynomial over GF(2^8)
// multiply it with: a(x) = {03} x^3 + {01} x^2 + {01} x + {02} (in hex: 0x03010102)
// and modulo with the fixed term: x^4 + 1 (in hex: 0x01_00000001)

// For the multiplication:
// the result can be expanded and simplified as follows:
// c(x) = s(x) * a(x)  =(Expand)=>
// c6 * x^6 + c5 * x^5 + c4 * x^4 + c3 * x^3 + c2 * x^2 + c1 * x + c0 = s(x) * a(x)
//   where:
// c6 = s3 * a3                                     = {03}s3
// c5 = s3 * a2 <+> s2 * a3                         = {01}s3 <+> {03}s2
// c4 = s3 * a1 <+> s2 * a2 <+> s1 * a3             = {01}s3 <+> {01}s2 <+> {03}s1
// c3 = s3 * a0 <+> s2 * a1 <+> s1 * a2 <+> s0 * a3 = {02}s3 <+> {01}s2 <+> {01}s1 <+> {03}s0
// c2 =             s2 * a0 <+> s1 * a1 <+> s0 * a2 =            {02}s2 <+> {01}s1 <+> {01}s0
// c1 =                         s1 * a0 <+> s0 * a1 =                       {02}s1 <+> {01}s0
// c0 =                                     s0 * a0 =                                  {02}s0

// For the modulation:
// the result can be expanded as:
// s'(x) = c(x) mod (x^4 + 1)
// s'3 = c6 + c3 = {03}s3 <+> {02}s2 <+> {01}s1 <+> {01}s0
// s'2 = c5 + c2 = {01}s3 <+> {03}s2 <+> {02}s1 <+> {01}s0
// s'1 = c4 + c1 = {01}s3 <+> {01}s2 <+> {03}s1 <+> {02}s0
// s'0 = c3      = {02}s3 <+> {01}s2 <+> {01}s1 <+> {03}s0

// modulo multiplication of 2 over GF(2^8)
// const m2 = s => (s & 0x80 ? (s << 1) ^ 0x11b : s << 1);
// this can be pre-calculated and stored in mapped table
const m2 = s => [
  0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
  0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
  0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
  0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
  0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
  0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
  0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
  0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
  0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
  0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
  0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
  0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
  0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
  0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
  0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
  0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5,
][s];

// modulo multiplication of 3 over GF(2^8)
// const m3 = s => m2(s) ^ s;
// this can be pre-calculated and stored in mapped table
const m3 = s => [
  0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
  0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
  0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
  0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
  0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
  0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
  0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
  0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
  0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
  0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
  0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
  0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
  0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
  0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
  0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
  0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a,
][s];

// s'0 = {02}s0 <+> {03}s1 <+> {01}s2 <+> {01}s3
const s0 = (c0, c1, c2, c3) => m2(c0) ^ m3(c1) ^ c2 ^ c3;

// s'1 = {01}s0 <+> {02}s1 <+> {03}s2 <+> {01}s3
const s1 = (c0, c1, c2, c3) => c0 ^ m2(c1) ^ m3(c2) ^ c3;

// s'2 = {01}s0 <+> {01}s1 <+> {02}s2 <+> {02}s3
const s2 = (c0, c1, c2, c3) => c0 ^ c1 ^ m2(c2) ^ m3(c3);

// s'3 = {03}s0 <+> {01}s1 <+> {01}s2 <+> {03}s3
const s3 = (c0, c1, c2, c3) => m3(c0) ^ c1 ^ c2 ^ m2(c3);


/**
 *
 * @param {{u8: Uint8Array}} state
 */
export const mixColumns = (state) => {
  const u8 = state.u8;

  for (let c = 0; c < 4; c += 1) {
    const c0 = u8[0 * 4 + c];
    const c1 = u8[1 * 4 + c];
    const c2 = u8[2 * 4 + c];
    const c3 = u8[3 * 4 + c];

    u8[0 * 4 + c] = s0(c0, c1, c2, c3);
    u8[1 * 4 + c] = s1(c0, c1, c2, c3);
    u8[2 * 4 + c] = s2(c0, c1, c2, c3);
    u8[3 * 4 + c] = s3(c0, c1, c2, c3);
  }
  return state;
};

export default mixColumns;
